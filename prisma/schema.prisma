// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Match {
  id              String   @id // PandaScore ID
  kcTeam          String
  kcId            String   // KC team ID
  opponent        String   // Opponent team name
  opponentImage   String?  // Opponent team image URL
  leagueName      String   // League name
  leagueImage     String?  // League image URL
  serieName       String   // Serie name
  tournamentName  String   // Tournament name
  tournamentId    String?  // Tournament ID from PandaScore
  hasBracket      Boolean  @default(false)
  numberOfGames   Int      // Number of games in the match
  beginAt         DateTime
  status          String   @default("not_started") // not_started, running, finished, announced, canceled
  score           String?  // Match score (e.g., "2-1", "3-0")
  createdAt       DateTime @default(now())

  @@map("matches")
}

model StandingCache {
  id          String @id @default(cuid())
  tournamentId String // Tournament ID
  data        String // JSON string of standings/bracket data
  expiresAt   DateTime // Cache expiration time
  createdAt   DateTime @default(now())

  @@map("standing_cache")
}

model GuildSettings {
  guildId                    String @id
  name                       String? // Discord server name
  memberCount                Int    @default(0) // Number of members
  channelId                  String // Discord channel ID
  pingRoles                  String[] @default([]) // Array of role IDs to ping
  filteredTeams              String[] @default([]) // Array of team IDs to filter matches
  enablePreMatchNotifications Boolean @default(true) // Enable/disable 30-minute pre-match notifications
  enableScoreNotifications    Boolean @default(true) // Enable/disable score notifications
  enableUpdateNotifications   Boolean @default(true)
  joinedAt                   DateTime @default(now())
  updatedAt                  DateTime? @updatedAt

  // Relations
  commandStats    CommandStat[]
  tickets         Ticket[]
  performanceMetrics PerformanceMetric[]

  @@map("guild_settings")
}

// New models for statistics

model CommandStat {
  id        String   @id @default(cuid())
  guildId   String   // Discord Guild ID (can be null for global stats)
  commandName String
  userId    String   // Discord User ID
  username  String   // Discord username
  teamArg   String?  // Team argument used (for popularity stats)
  executedAt DateTime @default(now())

  // Relations
  guild     GuildSettings?   @relation(fields: [guildId], references: [guildId])

  @@map("command_stats")
}

model Ticket {
  id          String   @id @default(cuid())
  guildId     String   // Discord Guild ID
  userId      String   // Discord User ID
  username    String   // Discord username
  type        TicketType // Ticket type (bug, improvement)
  status      TicketStatus @default(OPEN) // Ticket status
  description String?  // Optional description
  answer      String?  // Response to the request
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  guild       GuildSettings    @relation(fields: [guildId], references: [guildId])

  @@map("tickets")
}

model PerformanceMetric {
  id              String   @id @default(cuid())
  guildId         String?  // Discord Guild ID (can be null for global metrics)
  commandName     String   // Command name
  responseTime    Int      // Response time in milliseconds
  success         Boolean  // Whether the command executed successfully
  errorMessage    String?  // Error message if failed
  executedAt      DateTime @default(now())

  // Relations
  guild           GuildSettings?   @relation(fields: [guildId], references: [guildId])

  @@map("performance_metrics")
}

model ChangeLog {
  id          String   @id @default(cuid())
  text        String   // Text of the change
  status      String
  createdAt   DateTime @default(now())

  @@map("change_logs")
}

enum TicketType {
  BUG
  IMPROVEMENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
} 